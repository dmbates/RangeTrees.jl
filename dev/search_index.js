var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = RangeTrees","category":"page"},{"location":"#RangeTrees","page":"Home","title":"RangeTrees","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RangeTrees.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RangeTrees]","category":"page"},{"location":"#RangeTrees.RangeTree","page":"Home","title":"RangeTrees.RangeTree","text":"RangeTree\n\nAn augmented, balanced, binary interval tree of ranges (or intervals) represented as UnitRange{@ref}.\n\nThe nodes field, a vector of RangeNode{@ref}s, represents the tree. The root node of a RangeTree rt is rt.nodes[rt.rootind]. The rootind field should always be midrange(UnitRange(eachindex(nodes))).\n\nA RangeTree is usually constructed from a Vector{UnitRange}.\n\n\n\n\n\n","category":"type"},{"location":"#RangeTrees._addchildren!-Union{Tuple{T}, Tuple{Array{RangeNode{T}, 1}, UnitRange}} where T","page":"Home","title":"RangeTrees._addchildren!","text":"_addchildren!(v::Vector{RangeNode{T}}, inds::UnitRange) where T\n\nRecursively re-write the left, right, and maxlast fields in v[inds] to form an augmented, balanced, binary interval tree.\n\nCan be extended to store parents in the nodes.\n\n\n\n\n\n","category":"method"},{"location":"#RangeTrees.intersect!-Union{Tuple{T}, Tuple{Array{UnitRange{T}, 1}, UnitRange{T}, RangeTree{T}, Integer}} where T","page":"Home","title":"RangeTrees.intersect!","text":"intersect!(result::AbstractVector{UnitRange}, target::UnitRange, rt::RangeTree, index)\n\nRecursively intersect target with the intervals in the subtree of rt.nodes[index]. Non-empty intersections are pushed onto result in sorted order.\n\n\n\n\n\n","category":"method"},{"location":"#RangeTrees.midrange-Union{Tuple{UnitRange{T}}, Tuple{T}} where T","page":"Home","title":"RangeTrees.midrange","text":"midrange(rng::UnitRange{T})::T\n\nReturn the mid-value of rng rounding up when length(rng) is even.\n\n\n\n\n\n","category":"method"}]
}
